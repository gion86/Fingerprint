*********************************************************************************
*                            FINGERPRINT project                                *
*                          CONFIGURATION AND BUILD                              *
*********************************************************************************


The project can be built using Eclipse or a standard Unix makefile:

*********************************************************************************
ECLIPSE
*********************************************************************************

One way to build this project is to install Eclipse and the AVR plugin. 
The instruction I followed for the configuration can be found at 
http://horrorcoding.altervista.org/arduino-development-with-eclipse-a-step-by-step-tutorial-to-the-basic-setup/
for Windows OS and at http://itpedia.nyu.edu/wiki/Arduino_in_Eclipse for Mac and Linux. 
These instructions are for Mac but they work pretty straightforward on Linux too.
At these links you can find some useful instructions and hints on Eclipse 
configuration and AVR-GCC options:

- http://andybrown.me.uk/wk/2010/10/17/setting-up-eclipse-for-avr-projects/
- http://andybrown.me.uk/wk/2010/10/24/your-first-avr-project-in-eclipse/

Once you have configured the Eclipse environment, you can import this project to 
your workspace, and it should be already configured. 

DEPENDENCIES

This projects depends on some library which have to be linked against:
- ATTINY CORE
- FPS_GT511C1R
- BOUNCE 2
- SOFTWARE SERIAL

All those libraries can be found on github. 

The FPS_GT511C1R library has been modified: the strings in the serial output 
for debugging have been commented out, because they would fill up the flash 
memory in the small Attiny84. They should be saved in progmem.

You have to compile these libraries and include the respective folders in the 
Eclipse project configuration (Properties --> C/C++ General --> Path and Symbols - Includes tab).
You also have to configure the link process (Properties --> C/C++ General --> 
Path and Symbols - Libraries). Add the 4 libraries mentioned before and the ATTiny
core library (look in the section COMMON OPTIONS at the bottom of this document 
for instruction on how to build this library)
 

*********************************************************************************
MAKEFILE TODO
*********************************************************************************

It is possible to use command line interface and make command, look in the 
Makefile folder.
You need make utilities and AVR-GCC toolchain installed. In Ubuntu and derivates 
this command should be enough:

sudo apt-get install make avrdude binutils-avr gcc-avr avr-libc gdb-avr

I'm using Archlinux with AVR-gcc v5.2.0 and ARVDUDE v6.1

Look for instruction if you are using other Linux distribution or Windows. 
The makefile needs some paths to the root directories of each library, to find the 
correct includes and tools:

CORE_DIR=path
PROJECT_DIR=path 
SOFTWARESERIAL_DIR=path
FPS_GT511C1R_DIR=path
BOUNCE2_DIR=path

AVRDUDE=path

MCU=attiny84            #(CPU type, for AVR configuration)
CPU_SPEED=8000000UL     #(CPU frequency, for AVR configuration)

The makefile uses the same includes and compiler options used by Eclipse.


*********************************************************************************
COMMON OPTIONS
*********************************************************************************

Here are the options I used to build and run the project on an ATTiny84 micro, 
for BOTH ECLISPE AND MAKEFILE BUILD.

You have to add the "new" operator to the build of the ATTiny core: the standard 
ATTiny core doesn't include the "new" operator definition (header and cpp), that 
are necessary for the FPS library to compile.
You can find more information at the official Arduino forum, for example:

Topic: Using new operator to allocate arrays dynamically
http://forum.arduino.cc/index.php?topic=43362.0 

Some really useful setting for the AVR-GCC compiler are necessary to reduce the 
size of the final application, when you link more library together:

- http://andybrown.me.uk/wk/2010/10/24/recommended-avr-gcc-compiler-settings/

In fact you have only 8 KB of flash memory available on the ATTiny84 CPU,
so size optimization matters.


*********************************************************************************
BUILD
*********************************************************************************

The building process is done completely by Eclipse IDE, and the generated makefile 
will also use Avrdude utility at the end of the building to send the binary file 
to Arduino ISP/Programmer, if it is connect to the computer.
The new makefile in the active build configuration (in your project path) should 
be created by Eclipse during configuration. So just build the project as you would 
do for any other C++ project.

 
If you used the makefile in the /Makefile folder, once the path are correct, type 
make in the command line. Type make clean to clean the build folder.

